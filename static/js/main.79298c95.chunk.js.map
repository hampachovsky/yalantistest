{"version":3,"sources":["components/EmployeesBrithday/EmployeesBrithday.module.css","components/EmployeesList/Employees.module.css","components/common/Preloader/Preloader.module.css","components/Employee/Employee.module.css","store/reducers/employees/types.ts","components/common/Preloader/index.tsx","hooks/useAppSelector.ts","api/employeesAPI.ts","store/reducers/employees/employeesActionCreators.ts","store/reducers/employees/selectors.ts","utils/formateDate.ts","utils/checkFilled.ts","utils/sortByName.ts","components/EmployeesBrithday/index.tsx","components/Employee/index.tsx","components/EmployeesList/index.tsx","pages/Employees.tsx","App.tsx","store/reducers/employees/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["module","exports","EmployeesActionEnum","Preloader","className","style","preloaderWrapper","preloader","useAppSelector","useSelector","employeesAPI","axios","get","then","response","data","setFetching","payload","type","SET_FETCHING","getActiveEmployee","state","Set","employeesReducer","active","formateDate","date","moment","format","checkFilled","arr","employees","copyOfArray","slice","filledArr","i","length","employe","dob","push","firstName","toUpperCase","splice","sortByName","array","sort","first","second","name1","name2","lastName","EmployeesBrithday","months","activeEmployeeCopy","Array","from","employee","founded","filter","it","id","filledMonth","employeesBirthday","map","month","monthWrapper","monthHead","includes","Employee","activeEmployee","useState","setActive","dispatch","useDispatch","useEffect","has","isActive","TOGGLE_ACTIVE_EMPLOYEE","toggleActive","clsx","notActive","name","checked","value","onChange","htmlFor","EmployeesList","alphabet","split","employeesCopy","filledLetters","alpabetList","letter","letterWrapper","employeesWrapper","list","Employees","display","justifyContent","App","isFetching","a","SET_EMPLOYEES","path","to","initialState","JSON","parse","window","localStorage","getItem","reducers","action","rootReducer","combineReducers","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","subscribe","myData","getState","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,kBAAoB,6CAA6C,UAAY,qCAAqC,aAAe,0C,mBCAnJD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,cAAgB,iCAAiC,iBAAmB,sC,mBCArHD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,IAAM,yB,mBCAjED,EAAOC,QAAU,CAAC,OAAS,2B,qFCYfC,E,gECVCC,EAAY,WACvB,OACE,qBAAKC,UAAWC,IAAMC,iBAAtB,SACE,qBAAKF,UAAWC,IAAME,UAAtB,SACE,2B,OCFKC,EAAkDC,I,iDCFlDC,EAAe,WAExB,OAAOC,IACJC,IAAgB,kEAChBC,MAAK,SAACC,GAAD,OAAcA,EAASC,U,SHMvBb,K,wCAAAA,E,0DAAAA,E,uCAAAA,M,KIFL,IAIMc,EAAc,SAACC,GAAD,MAA0C,CACnEC,KAAMhB,EAAoBiB,aAC1BF,Y,gBCfWG,EAAoB,SAACC,GAChC,OAAO,IAAIC,IAAID,EAAME,iBAAiBC,S,yBCD3BC,EAAc,SAACC,EAAcR,GACxC,MAAa,YAATA,EAA2BS,IAAOD,GAAME,OAAO,QACtC,WAATV,EAA0BS,IAAOD,GAAME,OAAO,gBAC3CD,IAAOD,GAAME,OAAO,YCHhBC,EAAc,SAACC,EAAeC,EAAuBb,GAChE,IAAMc,EAAcF,EAAIG,QAClBC,EAAsB,GAE5B,GAAa,eAAThB,EACF,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAYI,OAAQD,IAAK,CAAC,IAAD,gBACrBJ,GADqB,IAC3C,2BAAiC,CAAC,IAAvBM,EAAsB,QAC3BZ,EAAYY,EAAQC,IAAK,aAAeN,EAAYG,IACtDD,EAAUK,KAAKP,EAAYG,KAHY,+BAS/C,GAAa,gBAATjB,EACF,IAAK,IAAIiB,EAAI,EAAGA,EAAIH,EAAYI,OAAQD,IAAK,CAAC,IAAD,gBACrBJ,GADqB,IAC3C,2BAAiC,SACnBS,UAAU,GAAGC,gBAAkBT,EAAYG,KACrDD,EAAUK,KAAKP,EAAYG,IAC3BH,EAAYU,OAAOP,EAAG,KAJiB,+BAS/C,OAAOD,GCxBIS,EAAa,SAACC,EAAmB1B,GAC5C,OAAO0B,EAAMC,MAAK,SAACC,EAAiBC,GAClC,IAAIC,EACAC,EASJ,MARa,aAAT/B,GACF8B,EAAQF,EAAMI,SACdD,EAAQF,EAAOG,WAEfF,EAAQF,EAAMN,UACdS,EAAQF,EAAOP,WAGbQ,EAAQC,GAAe,EACvBD,EAAQC,EAAc,EACnB,M,iBCPEE,EAAoB,WAmB/B,IAlBA,IAAMC,EAAS,CACb,WACA,WACA,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,WAGIC,EADiBC,MAAMC,KAAK/C,EAAeY,IACPa,QACpCuB,EAAWhD,GAAe,SAACa,GAAD,OAAWA,EAAME,iBAAiBQ,aAC5D0B,EAAsB,GAlBS,WAmB5BtB,GACPsB,EAAQlB,KAAR,MAAAkB,EAAO,YAASD,EAASE,QAAO,SAACC,GAAD,OAAaA,EAAGC,KAAOP,EAAmBlB,SADnEA,EAAI,EAAGA,EAAIkB,EAAmBjB,OAAQD,IAAM,EAA5CA,GAITQ,EAAWc,EAAS,YAEpB,IAAMI,EAAwBhC,EAAYuB,EAAQK,EAAS,cAE3D,OACE,sBAAKrD,UAAWC,IAAMyD,kBAAtB,UACE,oDACA,uBACEL,EAAQrB,OAGRgB,EAAOW,KAAI,SAACC,GACV,OACE,sBAAiB5D,UAAWC,IAAM4D,aAAlC,UACE,oBAAI7D,UAAWC,IAAM6D,UAArB,SAAiCF,IAChCH,EAAYM,SAASH,GACpBP,EAAQM,KAAI,SAACJ,GACX,OAAOlC,EAAYkC,EAAGrB,IAAK,aAAe0B,EACxC,oBAAgB5D,UAAWC,IAAMmD,SAAjC,SACE,mCACGG,EAAGnB,UADN,IACkBmB,EAAGT,SADrB,MACkCzB,EAAYkC,EAAGrB,IAAK,UADtD,YADOqB,EAAGC,IAKV,QAGN,gDAbMI,MAJd,6D,iCC7BKI,EAAgC,SAAC,GAAsD,IAApD5B,EAAmD,EAAnDA,UAAWU,EAAwC,EAAxCA,SAAUU,EAA8B,EAA9BA,GAAItB,EAA0B,EAA1BA,IAAK+B,EAAqB,EAArBA,eAAqB,EACrEC,oBAAkB,GADmD,mBAC1F9C,EAD0F,KAClF+C,EADkF,KAE3FC,EAAWC,cAEjBC,qBAAU,WACRL,EAAeM,IAAIf,IAAOW,GAAU,KACnC,CAACF,EAAgBT,IAEpBc,qBAAU,WNAwB,IAClCzD,EMAEuD,GNAFvD,EMAgC,CAAE2C,KAAIgB,SAAUpD,GNEzC,CACLN,KAAMhB,EAAoB2E,uBAC1B5D,eMHC,CAACO,EAAQgD,EAAUlC,EAAKE,EAAWoB,EAAIV,IAE1C,IAAM4B,EAAe,WACnBP,GAAW/C,IAEb,OACE,gCACE,oBACEpB,UAAW2E,YAAKvD,EAASnB,IAAMmB,OAASnB,IAAM2E,WADhD,mBAEKxC,EAFL,YAEkBU,KAClB,iCACE,uBACEhC,KAAK,QACL+D,KAAK,SACLC,QAAS1D,EACT2D,MAAO,SACPC,SAAUN,IAEZ,uBAAOO,QAAQ,SAAf,oBAEA,uBACEnE,KAAK,QACL+D,KAAK,YACLE,MAAO,YACPD,SAAU1D,EACV4D,SAAUN,IAEZ,uBAAOO,QAAQ,YAAf,+B,iBCzCKC,EAA0B,WACrC,IAAMC,EAAW,6BAA6B9C,cAAc+C,MAAM,IAC5DzD,EAAYvB,GAAe,SAACa,GAAD,OAAWA,EAAME,iBAAiBQ,aAC7DsC,EAAiB7D,EAAeY,GAChCqE,EAAgB1D,EAAUE,QAChCU,EAAW8C,EAAe,aAC1B,IAAMC,EAAgB7D,EAAY0D,EAAUxD,EAAW,eAEjD4D,EAAcJ,EAASxB,KAAI,SAAC6B,GAChC,OACE,sBAAkBxF,UAAWC,IAAMwF,cAAnC,UACE,6BAAKD,IACJF,EAAcvB,SAASyB,GACtBH,EAAc1B,KACZ,SAACJ,GAAD,OACEA,EAAGnB,UAAU,GAAGC,gBAAkBmD,GAChC,cAAC,EAAD,CAEEpD,UAAWmB,EAAGnB,UACdU,SAAUS,EAAGT,SACbU,GAAID,EAAGC,GACPtB,IAAKqB,EAAGrB,IACR+B,eAAgBA,GALXV,EAAGC,OAUhB,gDAjBMgC,MAsBd,OACE,sBAAKxF,UAAWC,IAAMyF,iBAAtB,UACE,8BACE,6CAEF,qBAAK1F,UAAWC,IAAM0F,KAAtB,SAA6BJ,QCzCtBK,EAAsB,WACjC,OACE,sBAAK3F,MAAO,CAAE4F,QAAS,OAAQC,eAAgB,gBAA/C,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCoBSC,I,EAAAA,EAnBf,WACE,IAAM3B,EAAWC,cACX2B,EAAa5F,GAAe,SAACa,GAAD,OAAWA,EAAME,iBAAiB6E,cAIpE,OAHA1B,qBAAU,WACRF,ETgB0B,uCAAM,WAAOA,GAAP,eAAA6B,EAAA,6DAClC7B,EAASxD,GAAY,IADa,SAEXN,IAFW,cAE5BI,EAF4B,gBAG5B0D,GArBqBvD,EAqBCH,EArB4C,CACxEI,KAAMhB,EAAoBoG,cAC1BrF,aAgBkC,OAIlCuD,EAASxD,GAAY,IAJa,iCAlBR,IAACC,IAkBO,OAAN,yDSfzB,CAACuD,IAEF,sBAAKpE,UAAU,MAAf,UACGgG,GAAc,cAAC,EAAD,IACf,eAAC,IAAD,WACE,cAAC,IAAD,CAAOG,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAUC,GAAG,sB,wBCpBfC,EAA6B,CACjC1E,UAAW,GACXP,OAAM,UAAEkF,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,WAAa,aAAtD,QAA+D,GACrEV,YAAY,GCCCW,EAJE,CACfxF,iBDI8B,WAAkE,IAAjEF,EAAgE,uDAAxDoF,EAAcO,EAA0C,uCAC/F,OAAQA,EAAO9F,MACb,KAAKhB,EAAoBoG,cACvB,OAAO,2BAAKjF,GAAZ,IAAmBU,UAAWiF,EAAO/F,UAEvC,KAAKf,EAAoBiB,aACvB,OAAO,2BAAKE,GAAZ,IAAmB+E,WAAYY,EAAO/F,UAExC,KAAKf,EAAoB2E,uBACvB,OAAO,2BACFxD,GADL,IAEEG,OAAQwF,EAAO/F,QAAQ2D,SAAf,sBACAvD,EAAMG,QADN,CACcwF,EAAO/F,QAAQ2C,KACjCvC,EAAMG,OAAOkC,QAAO,SAACC,GAAD,OAAQA,IAAOqD,EAAO/F,QAAQ2C,QAI1D,QACE,OAAOvC,KErBP4F,EAAcC,YAAgBH,GAS9BI,GALc,kBAAXP,QAAuBA,OAAOQ,qCAEjCR,OAAOQ,qCAAqC,IAC5CC,KAE4BC,YAAgBC,MAErCC,EAAQC,YAAYR,EAAaE,GAC9CK,EAAME,WAAU,WACd,IAAMC,EAAS,IAAIrG,IAAIkG,EAAMI,WAAWrG,iBAAiBC,QACzDoF,OAAOC,aAAagB,QAAQ,SAAUnB,KAAKoB,UAAUxE,MAAMC,KAAKoE,QCVlEI,IAASC,OACP,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.79298c95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeesBirthday\":\"EmployeesBrithday_employeesBirthday__bL76W\",\"monthHead\":\"EmployeesBrithday_monthHead__33YQy\",\"monthWrapper\":\"EmployeesBrithday_monthWrapper__3Rx5f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Employees_list__2SN7N\",\"letterWrapper\":\"Employees_letterWrapper__2C9--\",\"employeesWrapper\":\"Employees_employeesWrapper__2Ggrj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__RXv9l\",\"eye\":\"Preloader_eye__3A1UH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Employee_active__3hpnT\"};","export interface Employee {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  dob: string;\r\n}\r\n\r\nexport interface InitialState {\r\n  employees: Employee[];\r\n  active: string[];\r\n  isFetching: boolean;\r\n}\r\n\r\nexport enum EmployeesActionEnum {\r\n  SET_EMPLOYEES = 'employees/SET_EMPLOYEES',\r\n  TOGGLE_ACTIVE_EMPLOYEE = 'employees/TOGGLE_ACTIVE_EMPLOYEE',\r\n  SET_FETCHING = 'employees/SET_FETCHING',\r\n}\r\n\r\nexport interface toggleActiveEmployeePayload {\r\n  isActive: boolean;\r\n  id: string;\r\n}\r\n\r\nexport interface ToggleActiveEmployeeAction {\r\n  type: EmployeesActionEnum.TOGGLE_ACTIVE_EMPLOYEE;\r\n  payload: toggleActiveEmployeePayload;\r\n}\r\n\r\nexport interface SetEmployeesAction {\r\n  type: EmployeesActionEnum.SET_EMPLOYEES;\r\n  payload: Employee[];\r\n}\r\nexport interface SetFetchingAction {\r\n  type: EmployeesActionEnum.SET_FETCHING;\r\n  payload: boolean;\r\n}\r\n\r\nexport type EmployeesAction = SetEmployeesAction | ToggleActiveEmployeeAction | SetFetchingAction;\r\n","import React from 'react';\r\nimport style from './Preloader.module.css';\r\n\r\nexport const Preloader = () => {\r\n  return (\r\n    <div className={style.preloaderWrapper}>\r\n      <div className={style.preloader}>\r\n        <i></i>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport type { RootState } from 'store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { Employee } from './../store/reducers/employees/types';\r\nimport axios from 'axios';\r\n\r\nexport const employeesAPI = {\r\n  getEmployees() {\r\n    return axios\r\n      .get<Employee[]>('https://yalantis-react-school-api.yalantis.com/api/task0/users')\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n","import { employeesAPI } from 'api/employeesAPI';\r\nimport { AppDispatch } from 'store';\r\nimport {\r\n  Employee,\r\n  EmployeesActionEnum,\r\n  SetEmployeesAction,\r\n  SetFetchingAction,\r\n  ToggleActiveEmployeeAction,\r\n  toggleActiveEmployeePayload,\r\n} from './types';\r\n\r\nexport const setEmployees = (payload: Employee[]): SetEmployeesAction => ({\r\n  type: EmployeesActionEnum.SET_EMPLOYEES,\r\n  payload,\r\n});\r\nexport const setFetching = (payload: boolean): SetFetchingAction => ({\r\n  type: EmployeesActionEnum.SET_FETCHING,\r\n  payload,\r\n});\r\n\r\nexport const toggleActiveEmployee = (\r\n  payload: toggleActiveEmployeePayload,\r\n): ToggleActiveEmployeeAction => {\r\n  return {\r\n    type: EmployeesActionEnum.TOGGLE_ACTIVE_EMPLOYEE,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const fetchEmployees = () => async (dispatch: AppDispatch) => {\r\n  dispatch(setFetching(true));\r\n  const response = await employeesAPI.getEmployees();\r\n  await dispatch(setEmployees(response));\r\n  dispatch(setFetching(false));\r\n};\r\n","import { RootState } from 'store';\r\n\r\nexport const getActiveEmployee = (state: RootState) => {\r\n  return new Set(state.employeesReducer.active);\r\n};\r\n","import moment from 'moment';\r\n\r\nexport const formateDate = (date: string, type: string) => {\r\n  if (type === 'toMonth') return moment(date).format('MMMM');\r\n  if (type === 'toFull') return moment(date).format('D MMMM, YYYY');\r\n  return moment(date).format('d, m, y');\r\n};\r\n","import { Employee } from '../store/reducers/employees/types';\r\nimport { formateDate } from './formateDate';\r\nexport const checkFilled = (arr: string[], employees: Employee[], type: string): string[] => {\r\n  const copyOfArray = arr.slice();\r\n  const filledArr: string[] = [];\r\n\r\n  if (type === 'checkMonth') {\r\n    for (let i = 0; i < copyOfArray.length; i++) {\r\n      for (const employe of employees) {\r\n        if (formateDate(employe.dob, 'toMonth') === copyOfArray[i]) {\r\n          filledArr.push(copyOfArray[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (type === 'checkLetter') {\r\n    for (let i = 0; i < copyOfArray.length; i++) {\r\n      for (const employe of employees) {\r\n        if (employe.firstName[0].toUpperCase() === copyOfArray[i]) {\r\n          filledArr.push(copyOfArray[i]);\r\n          copyOfArray.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return filledArr;\r\n};\r\n","import { Employee } from 'store/reducers/employees/types';\r\n\r\nexport const sortByName = (array: Employee[], type: string): Employee[] => {\r\n  return array.sort((first: Employee, second: Employee) => {\r\n    let name1: string;\r\n    let name2: string;\r\n    if (type === 'lastName') {\r\n      name1 = first.lastName;\r\n      name2 = second.lastName;\r\n    } else {\r\n      name1 = first.firstName;\r\n      name2 = second.firstName;\r\n    }\r\n\r\n    if (name1 < name2) return -1;\r\n    if (name1 > name2) return 1;\r\n    return 0;\r\n  });\r\n};\r\n","import { useAppSelector } from 'hooks/useAppSelector';\r\nimport React from 'react';\r\nimport { getActiveEmployee } from 'store/reducers/employees/selectors';\r\nimport { Employee } from 'store/reducers/employees/types';\r\nimport { checkFilled } from 'utils/checkFilled';\r\nimport { formateDate } from 'utils/formateDate';\r\nimport { sortByName } from 'utils/sortByName';\r\nimport style from './EmployeesBrithday.module.css';\r\n\r\nexport const EmployeesBrithday = () => {\r\n  const months = [\r\n    'November',\r\n    'December',\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n  ];\r\n  const activeEmployee = Array.from(useAppSelector(getActiveEmployee));\r\n  const activeEmployeeCopy = activeEmployee.slice();\r\n  const employee = useAppSelector((state) => state.employeesReducer.employees);\r\n  const founded: Employee[] = [];\r\n  for (let i = 0; i < activeEmployeeCopy.length; i++) {\r\n    founded.push(...employee.filter((it: any) => it.id === activeEmployeeCopy[i]));\r\n  }\r\n\r\n  sortByName(founded, 'lastName');\r\n\r\n  const filledMonth: string[] = checkFilled(months, founded, 'checkMonth');\r\n\r\n  return (\r\n    <div className={style.employeesBirthday}>\r\n      <h1>Employees birthday</h1>\r\n      <hr />\r\n      {!founded.length ? (\r\n        <h3>Employees List is empty</h3>\r\n      ) : (\r\n        months.map((month) => {\r\n          return (\r\n            <div key={month} className={style.monthWrapper}>\r\n              <h3 className={style.monthHead}>{month}</h3>\r\n              {filledMonth.includes(month) ? (\r\n                founded.map((it: any) => {\r\n                  return formateDate(it.dob, 'toMonth') === month ? (\r\n                    <li key={it.id} className={style.employee}>\r\n                      <strong>\r\n                        {it.firstName} {it.lastName} - {formateDate(it.dob, 'toFull')} year\r\n                      </strong>\r\n                    </li>\r\n                  ) : null;\r\n                })\r\n              ) : (\r\n                <h3>No Employees</h3>\r\n              )}\r\n            </div>\r\n          );\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import clsx from 'clsx';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleActiveEmployee } from 'store/reducers/employees/employeesActionCreators';\r\nimport { Employee as EmployeeType } from 'store/reducers/employees/types';\r\nimport { Set } from 'typescript';\r\nimport style from './Employee.module.css';\r\n\r\ninterface PropsType extends EmployeeType {\r\n  activeEmployee: Set<string>;\r\n}\r\n\r\nexport const Employee: React.FC<PropsType> = ({ firstName, lastName, id, dob, activeEmployee }) => {\r\n  const [active, setActive] = useState<boolean>(false);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    activeEmployee.has(id) && setActive(true);\r\n  }, [activeEmployee, id]);\r\n\r\n  useEffect(() => {\r\n    dispatch(toggleActiveEmployee({ id, isActive: active }));\r\n  }, [active, dispatch, dob, firstName, id, lastName]);\r\n\r\n  const toggleActive = () => {\r\n    setActive(!active);\r\n  };\r\n  return (\r\n    <div>\r\n      <h2\r\n        className={clsx(active ? style.active : style.notActive)}\r\n      >{`${firstName} ${lastName}`}</h2>\r\n      <form>\r\n        <input\r\n          type='radio'\r\n          name='active'\r\n          checked={active}\r\n          value={'active'}\r\n          onChange={toggleActive}\r\n        />\r\n        <label htmlFor='active'>Active</label>\r\n\r\n        <input\r\n          type='radio'\r\n          name='notActive'\r\n          value={'notActive'}\r\n          checked={!active}\r\n          onChange={toggleActive}\r\n        />\r\n        <label htmlFor='notActive'>Not Active</label>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import { Employee } from 'components/Employee';\r\nimport { useAppSelector } from 'hooks/useAppSelector';\r\nimport React from 'react';\r\nimport { getActiveEmployee } from 'store/reducers/employees/selectors';\r\nimport { checkFilled } from 'utils/checkFilled';\r\nimport { sortByName } from 'utils/sortByName';\r\nimport style from './Employees.module.css';\r\n\r\nexport const EmployeesList: React.FC = () => {\r\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'.toUpperCase().split('');\r\n  const employees = useAppSelector((state) => state.employeesReducer.employees);\r\n  const activeEmployee = useAppSelector(getActiveEmployee);\r\n  const employeesCopy = employees.slice();\r\n  sortByName(employeesCopy, 'firstName');\r\n  const filledLetters = checkFilled(alphabet, employees, 'checkLetter');\r\n\r\n  const alpabetList = alphabet.map((letter: string) => {\r\n    return (\r\n      <div key={letter} className={style.letterWrapper}>\r\n        <h2>{letter}</h2>\r\n        {filledLetters.includes(letter) ? (\r\n          employeesCopy.map(\r\n            (it) =>\r\n              it.firstName[0].toUpperCase() === letter && (\r\n                <Employee\r\n                  key={it.id}\r\n                  firstName={it.firstName}\r\n                  lastName={it.lastName}\r\n                  id={it.id}\r\n                  dob={it.dob}\r\n                  activeEmployee={activeEmployee}\r\n                />\r\n              ),\r\n          )\r\n        ) : (\r\n          <h3>NO EMPLOYEES</h3>\r\n        )}\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className={style.employeesWrapper}>\r\n      <div>\r\n        <h1>Employees</h1>\r\n      </div>\r\n      <div className={style.list}>{alpabetList}</div>\r\n    </div>\r\n  );\r\n};\r\n","import { EmployeesBrithday } from 'components/EmployeesBrithday';\r\nimport { EmployeesList } from 'components/EmployeesList';\r\nimport React from 'react';\r\n\r\nexport const Employees: React.FC = () => {\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n      <EmployeesList />\r\n      <EmployeesBrithday />\r\n    </div>\r\n  );\r\n};\r\n","import { Preloader } from 'components/common/Preloader';\nimport { useAppSelector } from 'hooks/useAppSelector';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router';\nimport { fetchEmployees } from 'store/reducers/employees/employeesActionCreators';\nimport './App.css';\nimport { Employees } from './pages/Employees';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isFetching = useAppSelector((state) => state.employeesReducer.isFetching);\n  useEffect(() => {\n    dispatch(fetchEmployees());\n  }, [dispatch]);\n  return (\n    <div className='App'>\n      {isFetching && <Preloader />}\n      <Switch>\n        <Route path='/employees'>\n          <Employees />\n        </Route>\n        <Redirect to='/employees' />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { EmployeesAction, EmployeesActionEnum, InitialState } from './types';\r\n\r\nconst initialState: InitialState = {\r\n  employees: [],\r\n  active: JSON.parse(window.localStorage.getItem('active') || '[]') ?? [],\r\n  isFetching: false,\r\n};\r\nexport const employeesReducer = (state = initialState, action: EmployeesAction): InitialState => {\r\n  switch (action.type) {\r\n    case EmployeesActionEnum.SET_EMPLOYEES: {\r\n      return { ...state, employees: action.payload };\r\n    }\r\n    case EmployeesActionEnum.SET_FETCHING: {\r\n      return { ...state, isFetching: action.payload };\r\n    }\r\n    case EmployeesActionEnum.TOGGLE_ACTIVE_EMPLOYEE: {\r\n      return {\r\n        ...state,\r\n        active: action.payload.isActive\r\n          ? [...state.active, action.payload.id]\r\n          : state.active.filter((it) => it !== action.payload.id),\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { employeesReducer } from './employees/index';\r\n\r\nconst reducers = {\r\n  employeesReducer,\r\n};\r\n\r\nexport default reducers;\r\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst rootReducer = combineReducers(reducers);\r\n\r\nconst composeEnhancers =\r\n  //@ts-ignore\r\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? //@ts-ignore\r\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\r\n\r\nexport const store = createStore(rootReducer, enhancer);\r\nstore.subscribe(() => {\r\n  const myData = new Set(store.getState().employeesReducer.active);\r\n  window.localStorage.setItem('active', JSON.stringify(Array.from(myData)));\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from 'store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}